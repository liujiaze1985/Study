JDK中使用较多，开发者很少使用。
场景 AtomicIntegerFieldUpdaterTest
	public class TestMe{

		private volatile int i;
		//多线程对TestMe操作，假设TestMe被原子封装，但是i 并没有被原子封装

		public void increment(){
			i++;
		}

		public int get(){

			return i ;
		}



	}



	AtomicIntegerFieldUpdater 对对象的属性进行原子类型的更新


为什么要使用:
1. 使其它类的属性的更新具备原子操作
	1.1 必须是volatile修饰的
	1.2 非private （如果是当前类，也可以是）
	1.3 类型必须一致

2. 不想使用锁，（包括显示锁或重量级锁synchronized）
3.大量需要原子类型修饰的对象，相比较耗费内存


使用过程中出现的错误：
