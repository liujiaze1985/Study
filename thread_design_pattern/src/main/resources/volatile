i=1;
i = i+1;
	 从主内存拿i 放入缓存 ， 计算后刷新缓存 ，再刷新主内存
cpu1 main memory -> i -> cache i+1 -> cache(2) -> main memory (2)

cpu2 main memory -> i -> cache i+1 -> cache(2) -> main memory (2)

解决缓存不一致的方案：
	1： 给数据总线加锁
			  总线（数据总线，地址总线，控制总线）
			  LOCK#
		  缺点：会将多核CPU运行变为串行化，严重影响CPU性能
    2：CPU高速缓存一致性协议
    		由Inter提出 ，MESI 指令
    		核心思想：
    		1： 当cpu写入数据的时候，如果发现该变量被共享（也就是说，该变量在其它cpu中也存在该变量的副本），会发出一个信号，通知其他cpu该变量的缓存无效，需要重新读取
    		2：当其它cpu访问该变量，重新到主内存获取

volatile关键字
一旦一个共享变量被volatile修饰，具备两层语义
	1. 保证了不同线程间的可见性  （高速缓存的一致性协议）
	2. 禁对其进行重排序 ， 也就是保证了有序性(内存屏障)
	3. 并未保证原子性


volatile关键字
1.保证重排序的是不会把后面的指令放到屏障的前面，也不会把前面的放到后面
2.强制对缓存的修改操作立刻写入主存
3.如果是写操作，它会导致其它cpu中的缓存失效

volatile的使用场景
1. 状态量标记
	volatile boolean start = true;
	while(start){
		//
	}

	void close(){
		start = false;
	}
2. 保证前后的一致性 （状态判断 ， 防止重排序）
	volatile boolean init;
	-----------------Thread-1--------------------
	//-------------------------------
	obj = createObj();
	init = true;
	-----------------Thread-2--------------------
	while(!init){
		sleep();
	}

	useTheObj(obj);
	//-------------------------------
