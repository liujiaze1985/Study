并发编程的三个比较重要的概念：

1：原子性 A
	保证一个或多个操作，要么都成功，要么都失败，中间不能由于任何的因素中断
2：可见性 V

3：有序性 O（避免受java重排序的影响）
	代码按顺序执行


java重排序 只要求最终一致性


保证：
1：原子性 A
	对基本数据 类型的变量赢取和赋值是保证了原子性的，要么都成功，要么都失败，中间不能由于任何的因素中断

	例：
	i = 10;
	先将cache中的i刷新到10 ，再刷memory中的i 为10

	判断以下是否满足原子性：
	a = 10; 满足
	b = a;  不满足 1. read a; 2. assign b;
	c++ ;   不满足 1. read c ; 2. add  3. assign to c
	c = c + 1; 不满足 1. read c ; 2. add  3. assign to c

	注意： long double类型 是64位，如果在32位系统上操作，有可能也不会满足原子性，应使用原子变量

2：可见性 V
	使用关键字volatile 保证可见性

3: 有序性：
		happens - before relationship

	3.1 代码的执行顺序，编写在前面的发生在编写在后面的之前
	3.2 unlock必须发生在lock之后
	3.3 volatile 修饰的变量，对一个变量的写操作先于对该变量的读操作
	3.4 传递规则 ，操作A 先于B，B先于C，那么A肯定先于C
	3.5 线程启动规则 ， start方法上肯定等于线程的run方法
	3.6 线程中断规则 ， interrupt这个动作，必须发生在捕获该动作之前
	3.7 对象销毁规则， 初始化必须发生在finalize之前
	3.8 线程终结规则， 所有的操作都发生在线程死亡之前
