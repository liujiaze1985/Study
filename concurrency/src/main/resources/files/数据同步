  public void run() {
        while (true) {
        	<==================1=====================>
            if (index>MAX)
                break;
            try {
                Thread.sleep(5L);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            <==================2=====================>
            System.out.println(Thread.currentThread() + "的号码是：" + index++);
            <==================3=====================>
        }
    }


    当 T1，T2，T3 都到了 if (index>MAX) 当前 index 为499
    当 T1执行到2号位置时，或许cpu分配切到其它线程 t1变为runnable
    T2执行到了3号位置 进行++操作
    cpu切换到T1 此时 index++变为了501
    同T1 ,T3线程index++变为了502


为解决以上问题，使用 synchronized 同步代码块改造，synchronized 代码块将代码变为了串行执行
 public void run() {

        synchronized (MONITOR) {
            while (true) {
                if (index > MAX) {
                    break;
                }
                try {
                    Thread.sleep(5L);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println(Thread.currentThread() + "的号码是：" + index++);
            }
        }
    }



public synchronized void run() {
	<==================1=====================>
	while (true) {
		if (index > MAX) {
			break;
		}
		try {
			Thread.sleep(5L);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println(Thread.currentThread() + "的号码是：" + index++);
	}
	//2
}
  当 T1，T2，T3 都到了 1号位置时  只有一个线程拿到了锁，将票出光以后，其它线程拿到锁后，发现资源已经卖光了，便直接退出


synchronized 对尽量小的范围进行加锁

	jps 查看JAVA 进程PID
	jstack  查看线程栈
	javap   汇编指令
		用法: javap <options> <classes>
		其中, 可能的选项包括:
		  -help  --help  -?        输出此用法消息
		  -version                 版本信息
		  -v  -verbose             输出附加信息
		  -l                       输出行号和本地变量表
		  -public                  仅显示公共类和成员
		  -protected               显示受保护的/公共类和成员
		  -package                 显示程序包/受保护的/公共类
								   和成员 (默认)
		  -p  -private             显示所有类和成员
		  -c                       对代码进行反汇编
		  -s                       输出内部类型签名
		  -sysinfo                 显示正在处理的类的
								   系统信息 (路径, 大小, 日期, MD5 散列)
		  -constants               显示最终常量
		  -classpath <path>        指定查找用户类文件的位置
		  -cp <path>               指定查找用户类文件的位置
		  -bootclasspath <path>    覆盖引导类文件的位置


		getfield
		putfield
		monitorenter 抢到锁
		monitorexit 释放锁
		goto
多层synchronized 容易引起死锁

